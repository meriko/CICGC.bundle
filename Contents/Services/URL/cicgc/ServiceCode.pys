####################################################################################################
def NormalizeURL(url):
	return url

####################################################################################################
def MetadataObjectForURL(url):
	try:
		videoDetails = GetVideoDetails(url)

		return EpisodeObject(
				title = videoDetails['title'],
				show = "Comedians In Cars Getting Coffee",
				summary = videoDetails['description'],
				thumb = videoDetails['images']['thumb'],
				art = videoDetails['images']['poster'],
				index = int(videoDetails['episode']),
				season = int(videoDetails['season']),
				originally_available_at = Datetime.ParseDate(videoDetails['pubDate'].split('T')[0]).date(),
				duration = int(videoDetails['durationSeconds']) * 1000
			)
	except:
		return None	

####################################################################################################
def MediaObjectsForURL(url):
	mediaObjs = []

	if Client.Platform in ('Android', 'iOS', 'Roku') or (Client.Platform == 'Safari' and Platform.OS == 'MacOSX'):
		# Add HLS
		mo = MediaObject(
			container               = 'mpegts',
			video_codec             = VideoCodec.H264,
			audio_codec             = AudioCodec.AAC,
			video_resolution        = '720',                
			audio_channels          = 2,
			optimized_for_streaming = True,
			parts                   = [
				PartObject(
					key = HTTPLiveStreamURL(Callback(PlayHLS, url = url)), 
				)
			]
		)

	else:
		# Add MP4
		mo = MediaObject(
			container               = Container.MP4,
			video_codec             = VideoCodec.H264,
			audio_codec             = AudioCodec.AAC,
			video_resolution        = '480',                
			audio_channels          = 2,
			optimized_for_streaming = True,
			parts                   = [
				PartObject(
					key = Callback(PlayVideo, url = url),
				)
			]
		)
		
	mediaObjs.append(mo)
	
	return mediaObjs

####################################################################################################
def GetVideoDetails(url):
	pageElement       = HTML.ElementFromURL(url)
	videosListElement = pageElement.xpath("//script[@type = 'application/json']")[0]
	videosDetails     = JSON.ObjectFromString(videosListElement.xpath("./text()")[0])
	videoDetails      = videosDetails['videos'][videosDetails['activeVideo']['video']]
	
	return videoDetails

####################################################################################################
def PlayHLS(url):
	videoDetails = GetVideoDetails(url)

	return Redirect(videoDetails['mediaUrl'])

####################################################################################################
def PlayVideo(url):
	videoDetails = GetVideoDetails(url)
	videoID      = hex(int(videoDetails['mediaId'])).split('x')[1]
	
	playPath = None
	
	xmlElement = XML.ElementFromURL('http://www.crackle.com/app/vidwallcache.aspx?flags=-1&o=12&fpl=2119386&fx=&partner=20')
	
	for item in xmlElement.xpath("//items//i"):
		if item.xpath("./@id")[0] == str(videoID):
			playPath = item.xpath("./@p")[0]
			break	
	
	if playPath:
		return Redirect("http://media-us-am.crackle.com/" + playPath +  "480p_1mbps.mp4")
	else:
		raise Ex.MediaNotAvailable
