RE_CRACKLE_VIDEO_ID = Regex('(?<=id=)[0-9]+')

####################################################################################################
def NormalizeURL(url):
	return url

####################################################################################################
def MetadataObjectForURL(url):
	try:
		videoDetails = GetVideoDetails(url)

		title = videoDetails['title']
		show = "Comedians In Cars Getting Coffee"
		summary = videoDetails['description']
		thumb = videoDetails['images']['thumb']
		index = int(videoDetails['episode'])
		season = int(videoDetails['season'])
		originally_available_at = Datetime.ParseDate(videoDetails['pubDate'].split('T')[0]).date()
		duration = int(videoDetails['durationSeconds']) * 1000

		return EpisodeObject(
				title = title,
				show = show,
				summary = summary,
				thumb = thumb,
				index = index,
				season = season,
				originally_available_at = originally_available_at,
				duration = duration
			)
	except:
		return None	

####################################################################################################
def MediaObjectsForURL(url):
	mediaObjs = []

	if Client.Platform in ('Android', 'iOS', 'Roku'):
		# Add HLS
		mo = MediaObject(
			container               = 'mpegts',
			video_codec             = VideoCodec.H264,
			audio_codec             = AudioCodec.AAC,
			video_resolution        = '720',                
			audio_channels          = 2,
			optimized_for_streaming = True,
			parts                   = [PartObject(key = HTTPLiveStreamURL(Callback(PlayHLS, url = url)))]
		)

	else:
		
		mo = MediaObject(
			container               = Container.MP4,
			video_codec             = VideoCodec.H264,
			audio_codec             = AudioCodec.AAC,
			video_resolution        = '480',                
			audio_channels          = 2,
			optimized_for_streaming = True,
			parts                   = [PartObject(key = Callback(PlayVideo, url = url))]
		)
	
	mediaObjs.append(mo)
	
	return mediaObjs

####################################################################################################
def GetVideoDetails(url):
	pageElement       = HTML.ElementFromURL(url)
	videosListElement = pageElement.xpath("//script[@type = 'application/json']")[0]
	videosDetails     = JSON.ObjectFromString(videosListElement.xpath("./text()")[0])
	videoDetails      = videosDetails['videos'][videosDetails['activeVideo']['video']]
	
	return videoDetails

####################################################################################################
def PlayHLS(url):
	videoDetails = GetVideoDetails(url)

	return Redirect(videoDetails['mediaUrl'])

####################################################################################################
def PlayVideo(url):
	pageElement = HTML.ElementFromURL(url)
	
	videoID = RE_CRACKLE_VIDEO_ID.search(pageElement.xpath("//head//link[@rel='video_src']/@href")[0]).group(0)
	videoID = hex(int(videoID)).split('x')[1]
	
	xmlElement = XML.ElementFromURL('http://www.crackle.com/app/vidwallcache.aspx?flags=-1&o=12&fpl=2119386&fx=&partner=20')
	for item in xmlElement.xpath("//items//i"):
		if item.xpath("./@id")[0] == str(videoID):
			finalURL = "http://media-us-am.crackle.com/" + item.xpath("./@p")[0] + "480p.mp4" 
	
			return Redirect(finalURL)
			
	raise Ex.MediaNotAvailable
